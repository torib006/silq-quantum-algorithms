import random;

// Current algorithm's limit - array length of 30
arr_length := 30 : !ℕ;
ar_length_bits := 5 : !ℕ;

def generate_Subset(k : !ℕ, arr : !ℕ[]) : !ℕ[]{
	subset := vector(k, 0:!ℕ);

	for i in [0..k){
		element_index := randomInt(ar_length_bits) as uint[ar_length_bits]; 
		element_index_meas := measure(element_index);
    	subset[i] = arr[element_index_meas];
  	}

    return subset;
} 


def generate_Lists(k : !ℕ, subset : !ℕ[]) : (!ℕ[] x !ℕ[]){
	output_list := vector(k, 0:!ℕ);
	input_list := vector(k, 0:!ℕ);
	
	for i in [0..k){
		output_list[i] = subset[i] % 7;
		input_list[i] = subset[i];
  	}
	
	return (output_list, input_list);
}


def check_Doubles(k : !ℕ, output_list : !ℕ[], input_list : !ℕ[]) : (!ℕ x !ℕ){
	grovers_item := 0 : !ℕ;
	for i in [0..k){
		for j in [i+1..k){
			if output_list[j] == output_list[i] && input_list[j] != input_list[i]{
				return (input_list[i], input_list[j]);
			} 
		}
	}
	return (0, 0);
}


// Source: https://github.com/eth-sri/silq.git
def grover[n:!ℕ](f: const uint[n] !→ lifted 𝔹):!ℕ{
	nIterations:=floor(π/(4·asin(2^(-n/2))));
	cand:=0:uint[n];
    for k in [0..n){ cand[k]:=H(cand[k]); }
	for k in [0..nIterations){
		if f(cand){ phase(π); }
		cand:=groverDiffusion(cand);
	}
	return measure(cand) as !ℕ;
}


// Source: https://github.com/eth-sri/silq.git
def groverDiffusion[n:!ℕ](cand:uint[n])mfree: uint[n]{
	for k in [0..n) { cand[k] := H(cand[k]); }
	if cand!=0{ phase(π); }
	for k in [0..n) { cand[k] := H(cand[k]); }
	return cand;
}



def main(){
    // Initialize an array of elements (hardcoded)
    array := [14, 15, 11, 3, 25, 57, 4, 6, 2, 67, 87, 5, 7, 46, 9, 20, 18, 1, 13, 56, 89, 100, 49, 34, 300, 900, 78, 43, 32, 8] as !ℕ[];

    // Set cardinality of a random subset
    k := 5 : !ℕ;

	// Generate random subset
	subset := generate_Subset(k, array) as !ℕ[];

	// Generate output list
	(outputs, inputs) := generate_Lists(k, subset);
	print(outputs, inputs);										// DEBUG

	// Collision elements
	collision1 := 0 : !ℕ;
	collision2 := 0 : !ℕ;

	if (check_Doubles(k, outputs, inputs) == (0, 0)){			// Collision not detected upon initial observation
		print(1);												// DEBUG

		// Assign element for Grover's search from verified inputs
		comp_el := inputs[0];

		// Define oracle for collision detection
    	f := λ(x : uint[5]) lifted : 𝔹 { 
    	    return x % 7 == comp_el % 7 && x != comp_el;
    	};

		// Iteration index and counter for Grover's loop
    	t := 0 : !ℤ;

		// Grover's loop
		while (t <= (22.5*sqrt(arr_length) + 1.4*(log(arr_length)/log(2))^2)){
			pending_solution_index := grover(f) : !ℕ;

			print(pending_solution_index);

			if pending_solution_index < 30 {
				for i in [0..k){
					if array[pending_solution_index] % 7 == inputs[i] % 7{
						collision1 = array[pending_solution_index];
						collision2 = inputs[i];
					} 
				}
			}
			t = t+1;
		}

	}

	else {(collision1,collision2) = check_Doubles(k, outputs, inputs);}

	print(collision1, collision2);
}