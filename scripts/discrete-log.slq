def phaseQ[n:!ℕ](const φ: uint[n])mfree{
	for i in [0..n){ if φ[i]{ phase(2·π·2^i/2^n); } }
}

def QFT[n:!ℕ](ψ: uint[n])mfree: uint[n]{
	for k in [0..n){
		j:=n sub 1 sub k;
		ψ[j] := H(ψ[j]); // ψ'[j] = 1/√2(|0⟩+expi(2π·2^k·(ψ&2^j)/2^n)|1⟩)
		if ψ[j]{ phaseQ(2^k·(ψ⊕2^j)); }// ψ''[j] = 1/√2(|0⟩+expi(2π·2^k·ψ/2^n)|1⟩)
	}
	for k in [0..n div 2){
		(ψ[k],ψ[n-k-1]) := (ψ[n-k-1],ψ[k]);
	}
	return ψ;
}

// Unitary transformation
def unit(const x : uint[1], a : !ℕ, b : !ℕ, coef1 : !ℕ, coef2 : !ℕ) : 𝔹 { 
    return x[2] != (b^coef1 * a^coef2);
}

def discreteLog(a : !ℕ, b : !ℕ, r : !ℕ) : !ℕ{

    // Initialize state
    qubits := vector(3, 0:uint[1]);

    // Apply QFT on first two qubits
	qubits[0] := QFT[1](qubits[0]);
	qubits[1] := QFT[1](qubits[1]);

	coef1 := measure(qubits[0]) as !ℕ;
	coef2 := measure(qubits[1]) as !ℕ;

	qubits[2] := unit(qubits[2], a, b, coef1, coef2);

    return;
}

def main(){
    print(discreteLog());
}